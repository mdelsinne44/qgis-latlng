# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLongCalcDialog
                                 A QGIS plugin
 Conversion between Decimal Degress and DMS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-09-24
        git sha              : $Format:%H$
        copyright            : (C) 2025 by NAOMIS
        email                : m.delsinne@naomis.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latlongcalc_dialog_base.ui'))


class LatLongCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLongCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Connect Lat DMS to DD
        self.spinLatD.valueChanged.connect(self.latDMStoDD)
        self.spinLatM.valueChanged.connect(self.latDMStoDD)
        self.spinLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)

        # Connect Lng DMS to DD
        self.spinLngD.valueChanged.connect(self.lngDMStoDD)
        self.spinLngM.valueChanged.connect(self.lngDMStoDD)
        self.spinLngS.valueChanged.connect(self.lngDMStoDD)
        self.cmbLngH.currentTextChanged.connect(self.lngDMStoDD)

        self.spinLngDD.editingFinished.connect(self.lngDDtoDMS)
        self.spinLatDD.editingFinished.connect(self.latDDtoDMS)

    def latDMStoDD(self):
        iDeg = self.spinLatD.value()
        iMin = self.spinLatM.value()
        dSec = self.spinLatS.value()
        sHen = self.cmbLatH.currentText()
        dDD = float(iDeg) + float(iMin) / 60 + float(dSec) / 3600
        if sHen == 'S':
            dDD = dDD * -1
        self.spinLatDD.setValue(dDD)

    def lngDMStoDD(self):
        iDeg = self.spinLngD.value()
        iMin = self.spinLngM.value()
        dSec = self.spinLngS.value()
        sHen = self.cmbLngH.currentText()
        dDD = float(iDeg) + float(iMin) / 60 + float(dSec) / 3600
        if sHen == 'W':
            dDD = dDD * -1
        self.spinLngDD.setValue(dDD)

    def latDDtoDMS(self):
        dDD = self.spinLatDD.value()

        iDeg = int(dDD)
        dMinFloat = (dDD - iDeg) * 60
        iMin = int(dMinFloat)
        dSec = (dMinFloat - iMin) * 60

        self.spinLatD.setValue(abs(iDeg))
        self.spinLatM.setValue(abs(iMin))
        self.spinLatS.setValue(abs(dSec))

        if dDD < 0:
            sHen = 'S'
        else:
            sHen = 'N'
        self.cmbLatH.setCurrentText(sHen)

        #self.repaint()

    def lngDDtoDMS(self):
        dDD = self.spinLngDD.value()

        iDeg = int(dDD)
        dMinFloat = (dDD - iDeg) * 60
        iMin = int(dMinFloat)
        dSec = (dMinFloat - iMin) * 60

        self.spinLngD.setValue(abs(iDeg))
        self.spinLngM.setValue(abs(iMin))
        self.spinLngS.setValue(abs(dSec))

        if dDD < 0:
            sHen = 'W'
        else:
            sHen = 'E'
        self.cmbLngH.setCurrentText(sHen) 